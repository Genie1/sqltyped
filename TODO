======== 0.1 ========

- Type input arguments of functions
- Handle SQL quoting: select `values` from table; see: http://stackoverflow.com/questions/10573922/what-does-the-sql-standard-say-about-usage-of  , language vs. `language`
- Check that query compiles if column name is reserved Scala keyword (e.g. type)
- Subselect as relation: select id from (select id, name from person) AS data where data.name = ?
- DUAL table
- Schemaprefixes
- Better parser errors 

======== 0.2 ========

- runtime querybuilding with Slick + interpolation: 
    def personByAge(from: Int, to: Int) = Persons.filter(p => p.age >= from && p.age <= to)
  then: 
    sql"""select name, age from person where ${personByAge}"""
- Generate meta types http://stackoverflow.com/questions/12295971/will-it-be-possible-to-generate-several-top-level-classes-with-one-macro-invocat
- in operator
- Infer function types from schema
- Improve names of input arguments
- A mechanism to merge, tranform or combine records
- Lift input / output types
- record to case class
- Handle dialect specific keywords properly (e.g. http://www.postgresql.org/docs/9.2/static/sql-keywords-appendix.html)

